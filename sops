#!/usr/bin/env Rscript

suppressPackageStartupMessages({
  library(argparser)
  library(stringr)
  library(readr)
  library(purrr)
})

# Def Args ----

p <- arg_parser("Set operations on text files, one element per line.")

p <- p |>
  add_argument("--files",
    short = "-f",
    nargs = Inf,
    help = "Input files."
  ) |>
  add_argument("--diff",
    short = "-d", flag = TRUE,
    help = "Difference."
  ) |>
  add_argument("--symd",
    short = "-s", flag = TRUE,
    help = "Symmetric difference."
  ) |>
  add_argument("--union",
    short = "-u", flag = TRUE,
    help = "Union."
  ) |>
  add_argument("--inter",
    short = "-i", flag = TRUE,
    help = "Intersection."
  )


argl <- parse_args(p, argv = commandArgs(trailingOnly = TRUES))
ops <- c("diff", "symd", "union", "inter")
selected <- argl[ops] |>
  unlist() |>
  which()

FILES <- argl$files
OP <- names(selected)[1]


# Check Args ----

error <- function(mssg) {
  mssg <- str_flatten(mssg)
  sink(stderr())
  cat(mssg, "\n", sep = "")
  print(p)
  sink()
  quit(status = 1, save = "no")
}

if (length(FILES) < 2) {
  mssg <- "At least two files are needed.\n"
  error(mssg)
}


if (length(selected) == 0) {
  mssg <- c(
    "Select one operation.\n",
    str_c("--", ops, " "), "\n"
  )
  error(mssg)
}

if (length(selected) > 1) {
  mssg <- c(
    "Select only one operation.\n",
    str_c("--", ops, " "), "\n\n"
  )
  error(mssg)
}

# Helpers ----

symdiff <- function(x, y) {
  setdiff(union(x, y), intersect(x, y))
}

file2uvec <- function(ifile) {
  x <- read_file(ifile) |>
    str_split("\n") |>
    unlist() |>
    unique()
  x[x != ""]
}

# Main ----

SETS <- vector(mode = "list", length = length(FILES))
names(SETS) <- FILES

for (i in seq_along(FILES)) {
  ifile <- FILES[[i]]
  SETS[[i]] <- file2uvec(ifile)
}


if (OP == "diff") {
  SETS |>
    reduce(setdiff) |>
    writeLines()
} else if (OP == "symd") {
  SETS |>
    reduce(symdiff) |>
    writeLines()
} else if (OP == "union") {
  SETS |>
    reduce(union) |>
    writeLines()
} else if (OP == "inter") {
  SETS |>
    reduce(intersect) |>
    writeLines()
} else {
  error("Unrecognized operation.\n")
}
